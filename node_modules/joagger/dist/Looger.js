"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LoggerFactory = exports.Logger = exports.LogLevels = void 0;
var StdHandler_1 = require("./Handlers/StdHandler");
exports.LogLevels = {
    DEBUG: { name: 'DEBUG', wight: 100 },
    INFO: { name: 'INFO', wight: 200 },
    NOTICE: { name: 'DEBUG', wight: 300 },
    WARNING: { name: 'WARNING', wight: 400 },
    ERROR: { name: 'ERROR', wight: 500 },
    CRITICAL: { name: 'CRITICAL', wight: 600 },
    ALERT: { name: 'ALERT', wight: 700 },
    EMERGENCY: { name: 'EMERGENCY', wight: 800 },
};
var Logger = (function () {
    function Logger(channel) {
        this.handlers = [];
        this._channel = channel;
    }
    Logger.prototype.setHandlers = function (handlers) {
        this.handlers = handlers;
    };
    Logger.prototype._log = function (level, message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        var now = new Date();
        for (var _i = 0, _a = this.handlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            handler.log({
                channel: this._channel,
                context: context,
                datetime: now,
                extra: extra,
                level: level,
                message: message
            });
        }
    };
    Logger.prototype.pushHandler = function (handler) {
        this.handlers.push(handler);
    };
    Logger.prototype.alert = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.ALERT, message, context, extra);
    };
    Logger.prototype.critical = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.CRITICAL, message, context, extra);
    };
    Logger.prototype.debug = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.DEBUG, message, context, extra);
    };
    Logger.prototype.emergency = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.EMERGENCY, message, context, extra);
    };
    Logger.prototype.error = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.ERROR, message, context, extra);
    };
    Logger.prototype.info = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.INFO, message, context, extra);
    };
    Logger.prototype.notice = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.NOTICE, message, context, extra);
    };
    Logger.prototype.warning = function (message, context, extra) {
        if (context === void 0) { context = {}; }
        if (extra === void 0) { extra = {}; }
        this._log(exports.LogLevels.WARNING, message, context, extra);
    };
    return Logger;
}());
exports.Logger = Logger;
var LoggerFactory = (function () {
    function LoggerFactory() {
    }
    LoggerFactory.create = function (name, handlers) {
        if (handlers === void 0) { handlers = []; }
        if (!(name in LoggerFactory.logsList)) {
            LoggerFactory.logsList[name] = this.make(name, handlers);
        }
        return LoggerFactory.logsList[name];
    };
    LoggerFactory.make = function (name, handlers) {
        if (handlers === void 0) { handlers = []; }
        var logger = new Logger(name);
        logger.setHandlers(handlers);
        return logger;
    };
    LoggerFactory.logsList = {};
    return LoggerFactory;
}());
exports.LoggerFactory = LoggerFactory;
function logger(channel, handlers) {
    if (channel === void 0) { channel = "default"; }
    if (handlers === void 0) { handlers = []; }
    if (handlers.length === 0)
        handlers.push(new StdHandler_1.StdHandler());
    return LoggerFactory.create(channel, handlers);
}
exports.logger = logger;
